DECLARE last_process_time TIMESTAMP;
DECLARE now TIMESTAMP;

-- Notice single quotes and not backticks. This function expects a string, not an identifier, as the parameter
CALL BQ.REFRESH_EXTERNAL_METADATA_CACHE('${images_table}');

BEGIN TRANSACTION;

SET last_process_time = (SELECT MAX(process_time) FROM `${process_watermark_table}`);
SET now = CURRENT_TIMESTAMP();

CREATE TEMP TABLE new_reports AS
WITH llm_response AS (
SELECT uri,
       updated,
       ml_generate_text_llm_result AS raw_response,
       `${clean_generate_text_json_function}`(ml_generate_text_llm_result) as cleaned_response,
       (SELECT value FROM UNNEST(metadata) WHERE name = 'stop_id') AS bus_stop_id,
       ml_generate_text_status AS model_response_status
FROM
    ML.GENERATE_TEXT(
        MODEL `event-processing-demo.bus_stop_image_processing.default_model`,
        TABLE `${images_table}`,
        STRUCT (
           """${prompt}""" AS prompt,
           ${temperature} AS temperature,
           ${max_output_tokens} AS max_output_tokens,
           TRUE AS flatten_json_output)
        )
    WHERE content_type = "image/jpeg" AND updated > last_process_time AND updated < now
)
SELECT
    GENERATE_UUID() as report_id,
    uri,
    updated,
    '${multimodal_model_id}' AS model_used,
    model_response_status,
    raw_response,
    cleaned_response,
    bus_stop_id,
    CAST (JSON_EXTRACT(cleaned_response, '$.cleanliness_level') AS INT64) AS cleanliness_level,
    JSON_EXTRACT(cleaned_response, '$.description') AS description,
    CAST (JSON_EXTRACT(cleaned_response, '$.is_bus_stop') AS BOOL) AS is_bus_stop,
    CAST (JSON_EXTRACT(cleaned_response, '$.number_of_people') AS INT64) AS number_of_people
FROM llm_response;

-- For production implementation a loop of re-processing failed predictions would be necessary.
-- In this demo we use the fail-fast approach
BEGIN
  DECLARE first_failure DEFAULT
    (SELECT CONCAT("At least one file failed to process: ", model_response_status, ", URI: ", uri)
        FROM new_reports WHERE model_response_status != '' LIMIT 1);
  IF NOT first_failure IS NULL THEN
    RAISE USING MESSAGE=first_failure;
  END IF;
END;

BEGIN
  DECLARE first_failure_to_extract_attributes DEFAULT
    (SELECT CONCAT("Failed to produce requested JSON for at least one file: ", "URI: ", uri,
    ", response:", raw_response,
    ", cleaned response: ", COALESCE(cleaned_response, "FAILED TO CLEAN RESPONSE"))
        FROM new_reports WHERE
          cleanliness_level IS NULL OR
          description IS NULL OR
          is_bus_stop IS NULL OR
          number_of_people IS NULL);
  IF NOT first_failure_to_extract_attributes IS NULL THEN
    RAISE USING MESSAGE=first_failure_to_extract_attributes;
  END IF;
END;

-- Insert new reports
INSERT INTO `${reports_table}` (report_id, uri, image_created, model_used, bus_stop_id, cleanliness_level, description, number_of_people, is_bus_stop)
SELECT report_id, uri, updated, model_used, bus_stop_id, cleanliness_level, description, number_of_people, is_bus_stop
  FROM new_reports;

-- Generate multimodal embeddings
CREATE TEMP TABLE new_multimodal_embeddings AS
SELECT
    uri,
    ml_generate_embedding_result AS embedding,
    ml_generate_embedding_status AS model_response_status
FROM
    ML.GENERATE_EMBEDDING(
            MODEL `${multimodal_embedding_model}`,
            -- Make sure that the WHERE clauses are identical in order to process the same data
            (SELECT * FROM `${images_table}` WHERE content_type = "image/jpeg" AND updated > last_process_time AND updated < now)
        );

-- TODO: verify that the set of URIs from both new_reports and new_multimodal_embeddings is the same.

-- For production implementation a loop of re-processing failed predictions would be necessary.
-- In this demo we use the fail-fast approach
BEGIN
  DECLARE first_failure DEFAULT
    (SELECT CONCAT("At least one file failed to generate embeddings: ", model_response_status, ", URI: ", uri)
        FROM new_multimodal_embeddings WHERE model_response_status != '' LIMIT 1);
  IF NOT first_failure IS NULL THEN
    RAISE USING MESSAGE=first_failure;
  END IF;
END;

-- Insert new multimodal embeddings
INSERT INTO `${multimodal_embeddings_table}` (report_id, model_used, embedding)
SELECT report_id, '${multimodal_embeddings_model_id}', embedding FROM new_reports r, new_multimodal_embeddings e
  WHERE r.uri = e.uri;

-- Generate text embeddings
INSERT INTO `${text_embeddings_table}` (report_id, model_used, embedding, model_response_status)
SELECT
    report_id,
    '${text_embeddings_model_id}',
    ml_generate_embedding_result AS embedding,
    ml_generate_embedding_status AS status
FROM
    ML.GENERATE_EMBEDDING(
            MODEL `${text_embeddings_model}`,
            (SELECT report_id, description as content FROM new_reports WHERE description IS NOT NULL),
            STRUCT('SEMANTIC_SIMILARITY' as task_type)
        );

-- We can miss the files arrived between the cache refresh and the time new_process_time was set.
-- It's also possible to set this time to the timestamp of the latest successfully processed image
-- and not fail the whole transaction.
SET last_process_time = (SELECT MAX(updated) FROM new_reports);

IF NOT last_process_time IS NULL THEN
  -- Update the process time watermark if we processed any of the images
  UPDATE `${process_watermark_table}`
  SET process_time = last_process_time
  WHERE TRUE;
END IF;

COMMIT TRANSACTION;