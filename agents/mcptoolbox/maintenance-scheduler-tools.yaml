sources:
  bigquery-source:
    kind: bigquery
    project: ${GOOGLE_CLOUD_PROJECT}
    location: ${GOOGLE_CLOUD_LOCATION}

tools:
  get-unresolved-incidents:
    kind: bigquery-sql
    source: bigquery-source
    statement: |
      SELECT incidents.incident_id, incidents.bus_stop_id, incidents.status,
                    reports.uri as source_image_uri, reports.content_type as source_image_mime_type,
                    reports.description, bus_stops.address
                FROM `${CLOUD_BIGQUERY_DATA_PROJECT}.bus_stop_image_processing.incidents` incidents
                JOIN `${CLOUD_BIGQUERY_DATA_PROJECT}.bus_stop_image_processing.image_reports` reports
                    ON incidents.open_report_id = reports.report_id
                JOIN `${CLOUD_BIGQUERY_DATA_PROJECT}.bus_stop_image_processing.bus_stops` bus_stops
                    ON incidents.bus_stop_id = bus_stops.bus_stop_id
                WHERE incidents.status = 'OPEN'
    description: |
      Provides the list of unresolved bus stop incidents which require maintenance

  get-expected-number-of-passengers:
    kind: bigquery-sql
    source: bigquery-source
    statement: |
      WITH forecast AS (
                    SELECT
                      bus_stop_id, forecast_timestamp, 
                      CAST(forecast_value AS INT64) as expected_number_of_passengers
                    FROM
                      AI.FORECAST(
                        (SELECT bus_stop_id, event_ts, num_riders
                          FROM `${CLOUD_BIGQUERY_DATA_PROJECT}.bus_stop_image_processing.bus_ridership`
                          WHERE bus_stop_id = @bus_stop_id),
                        data_col => 'num_riders',
                        timestamp_col => 'event_ts',
                        model => 'TimesFM 2.0',
                        id_cols => ['bus_stop_id'],
                        horizon => 500,
                        confidence_level => .8)
                )
                SELECT bus_stop_id, forecast_timestamp, expected_number_of_passengers 
                    FROM forecast WHERE forecast_timestamp BETWEEN CURRENT_TIMESTAMP() AND TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)
    description: |
      Provides expected number of passengers for a particular bus stop at some point in the future.
    parameters:
      - name: bus_stop_id
        type: string
        description: Bus stop id
