sources:
  bigquery-source:
    kind: "bigquery"
    project: ${BIGQUERY_RUN_PROJECT_ID}
    location: ${BIGQUERY_DATA_LOCATION}

tools:
  get-unresolved-incidents:
    kind: bigquery-sql
    source: bigquery-source
    statement: |
      SELECT incidents.incident_id, incidents.bus_stop_id, incidents.status,
                    reports.uri as source_image_uri, reports.content_type as source_image_mime_type,
                    reports.description, bus_stops.address
                FROM `${BIGQUERY_DATA_PROJECT_ID}.bus_stop_image_processing.incidents` incidents
                JOIN `${BIGQUERY_DATA_PROJECT_ID}.bus_stop_image_processing.image_reports` reports
                    ON incidents.open_report_id = reports.report_id
                JOIN `${BIGQUERY_DATA_PROJECT_ID}.bus_stop_image_processing.bus_stops` bus_stops
                    ON incidents.bus_stop_id = bus_stops.bus_stop_id
                WHERE incidents.status = 'OPEN'
    description: |
      Provides the list of unresolved bus stop incidents which require maintenance

  get-expected-number-of-passengers:
    kind: bigquery-sql
    source: bigquery-source
    statement: |
      WITH forecast AS (
        SELECT
        bus_stop_id, forecast_timestamp,
        CAST(forecast_value AS INT64) as expected_number_of_passengers
        FROM
        AI.FORECAST(
        (SELECT bus_stop_id, event_ts, num_riders
        FROM `${BIGQUERY_DATA_PROJECT_ID}.bus_stop_image_processing.bus_ridership`
        WHERE bus_stop_id IN UNNEST(@bus_stop_ids)),
        data_col => 'num_riders',
        timestamp_col => 'event_ts',
        model => 'TimesFM 2.0',
        id_cols => ['bus_stop_id'],
        horizon => 500,
        confidence_level => .8)
      )
      SELECT bus_stop_id, ARRAY_AGG(
        STRUCT(FORMAT_TIMESTAMP("%m/%d/%Y %H:%M", forecast_timestamp, @time_zone) as time, 
              GREATEST(expected_number_of_passengers, 0) as number_of_passengers)) as forecast
      FROM forecast
      WHERE forecast_timestamp BETWEEN CURRENT_TIMESTAMP() AND TIMESTAMP_ADD(CURRENT_TIMESTAMP(), INTERVAL 3 DAY)
      GROUP BY bus_stop_id
    description: |
      Provides expected number of passengers for a particular bus stop at some point in the future.
    parameters:
      - name: bus_stop_ids
        type: array
        description: Bus stop ids
        items:
          name: bus_stop_id
          type: string
          description: Bus stop id
      - name: time_zone
        type: string
        description: Time zone of where the bus stops are located

  schedule-maintenance:
    kind: bigquery-sql
    source: bigquery-source
    statement: |
      UPDATE `${BIGQUERY_DATA_PROJECT_ID}.bus_stop_image_processing.incidents`
                      SET status = 'SCHEDULED', 
                          maintenance_details = STRUCT(
                          @maintenance_start as scheduled_time, 
                          @reason as reason, 
                          @notification_subject as notification_subject, 
                          @notification_content as notification_body)
                      WHERE status = 'OPEN' and bus_stop_id = @bus_stop_id;
      SELECT "success" as status;
    description: |
      Provides expected number of passengers for a particular bus stop at some point in the future.
    parameters:
      - name: bus_stop_id
        type: string
        description: Bus stop id
      - name: maintenance_start
        type: string
        description: Maintenance start time
      - name: reason
        type: string
        description: Reason for maintenance
      - name: notification_subject
        type: string
        description: Subject of the notification email
      - name: notification_content
        type: string
        description: Contents of the notification email

toolsets:
 forecast_passangers:
   - get-expected-number-of-passengers
   - schedule-maintenance
